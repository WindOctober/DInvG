Function:main
the entry block of the function is: Basic Block 12
the exit block of the function is: Basic Block 0
	BasicBlock:12
			succ Basic Block is :11
	BasicBlock:11
			Statement type:DeclStmt
			Statement:int len = 0;

			Statement type:DeclStmt
			Statement:int i = 0;

			succ Basic Block is :10
	BasicBlock:10
			Statement type:BinaryOperator
			Statement:i < 11
			Conditional jump with condition: ForStmt
			succ Loop body Block is :9
			succ Exit Loop Block is :7
	BasicBlock:7
			Statement type:CStyleCastExpr
			Statement:(void)sizeof ((len == 1000) ? 1 : 0)
			Statement type:BinaryOperator
			Statement:len == 1000
			Conditional jump with condition: IfStmt
			succ Then Block is :6
			succ Else Block is :5
	BasicBlock:5
			Statement type:CallExpr
			Statement:__assert_fail("len == 1000", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/array/test_loop_assign.c", 22, __extension__ __PRETTY_FUNCTION__)
			succ Basic Block is :0
	BasicBlock:0
	BasicBlock:6
			succ Basic Block is :4
	BasicBlock:4
			Statement type:StmtExpr
			Statement:({
    if (len == 1000)
        ;
    else
        __assert_fail("len == 1000", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/array/test_loop_assign.c", 22, __extension__ __PRETTY_FUNCTION__);
})
			Statement type:BinaryOperator
			Statement:(void)sizeof ((len == 1000) ? 1 : 0) , __extension__ ({
    if (len == 1000)
        ;
    else
        __assert_fail("len == 1000", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/array/test_loop_assign.c", 22, __extension__ __PRETTY_FUNCTION__);
})
			Statement type:CallExpr
			Statement:malloc(sizeof(int) * len)
			Statement type:DeclStmt
			Statement:int *p = malloc(sizeof(int) * len);

			Statement type:CallExpr
			Statement:assign(p, len)
			Statement type:CStyleCastExpr
			Statement:(void)sizeof ((p[len - 1] == len - 1) ? 1 : 0)
			Statement type:BinaryOperator
			Statement:p[len - 1] == len - 1
			Conditional jump with condition: IfStmt
			succ Then Block is :3
			succ Else Block is :2
	BasicBlock:2
			Statement type:CallExpr
			Statement:__assert_fail("p[len-1] == len-1", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/array/test_loop_assign.c", 26, __extension__ __PRETTY_FUNCTION__)
			succ Basic Block is :0
	BasicBlock:3
			succ Basic Block is :1
	BasicBlock:1
			Statement type:StmtExpr
			Statement:({
    if (p[len - 1] == len - 1)
        ;
    else
        __assert_fail("p[len-1] == len-1", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/array/test_loop_assign.c", 26, __extension__ __PRETTY_FUNCTION__);
})
			Statement type:BinaryOperator
			Statement:(void)sizeof ((p[len - 1] == len - 1) ? 1 : 0) , __extension__ ({
    if (p[len - 1] == len - 1)
        ;
    else
        __assert_fail("p[len-1] == len-1", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/array/test_loop_assign.c", 26, __extension__ __PRETTY_FUNCTION__);
})
			succ Basic Block is :0
	BasicBlock:9
			Statement type:BinaryOperator
			Statement:len = 1000
			succ Basic Block is :8
	BasicBlock:8
			Statement type:UnaryOperator
			Statement:i++
			succ Basic Block is :10
CalleeFunction:assign
the entry block of the function is: Basic Block 5
the exit block of the function is: Basic Block 0
	BasicBlock:5
			succ Basic Block is :4
	BasicBlock:4
			Statement type:DeclStmt
			Statement:int i = 0;

			succ Basic Block is :3
	BasicBlock:3
			Statement type:BinaryOperator
			Statement:i < len
			Conditional jump with condition: ForStmt
			succ Loop body Block is :2
			succ Exit Loop Block is :0
	BasicBlock:0
	BasicBlock:2
			Statement type:BinaryOperator
			Statement:p[i] = i
			succ Basic Block is :1
	BasicBlock:1
			Statement type:UnaryOperator
			Statement:++i
			succ Basic Block is :3
