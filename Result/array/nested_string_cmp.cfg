Function:test
the entry block of the function is: Basic Block 12
the exit block of the function is: Basic Block 0
	BasicBlock:12
			succ Basic Block is :11
	BasicBlock:11
			Statement type:DeclStmt
			Statement:unsigned int i;

			Statement type:DeclStmt
			Statement:unsigned int j;

			Statement type:DeclStmt
			Statement:char compare[12] = {'\\', '<', '>', '?', '"', '~', '/', '\\', '[', '(', ')', '!'};

			Statement type:DeclStmt
			Statement:int ret = 0;

			Statement type:BinaryOperator
			Statement:i = 0
			succ Basic Block is :10
	BasicBlock:10
			Statement type:BinaryOperator
			Statement:i < (length + 1)
			Conditional jump with condition: ForStmt
			succ Loop body Block is :9
			succ Exit Loop Block is :3
	BasicBlock:3
			Statement type:ImplicitCastExpr
			Statement:ret
			Conditional jump with condition: IfStmt
			succ Then Block is :2
			succ Else Block is :1
	BasicBlock:1
			Statement type:ImplicitCastExpr
			Statement:ret
			Statement type:ReturnStmt
			Statement:return ret;

			succ Basic Block is :0
	BasicBlock:0
	BasicBlock:2
			Statement type:CallExpr
			Statement:printf("The input is invalid\n")
			succ Basic Block is :1
	BasicBlock:9
			Statement type:BinaryOperator
			Statement:j = 0
			succ Basic Block is :8
	BasicBlock:8
			Statement type:BinaryOperator
			Statement:j < 12
			Conditional jump with condition: ForStmt
			succ Loop body Block is :7
			succ Exit Loop Block is :4
	BasicBlock:4
			Statement type:UnaryOperator
			Statement:i++
			succ Basic Block is :10
	BasicBlock:7
			Statement type:BinaryOperator
			Statement:name[i] == compare[j]
			Conditional jump with condition: IfStmt
			succ Then Block is :6
			succ Else Block is :5
	BasicBlock:5
			Statement type:UnaryOperator
			Statement:j++
			succ Basic Block is :8
	BasicBlock:6
			Statement type:BinaryOperator
			Statement:ret = -1
			succ Basic Block is :5
Function:input_test
the entry block of the function is: Basic Block 6
the exit block of the function is: Basic Block 0
	BasicBlock:6
			succ Basic Block is :5
	BasicBlock:5
			Statement type:DeclStmt
			Statement:unsigned int type;

			Statement type:DeclStmt
			Statement:int res = 0;

			Statement type:BinaryOperator
			Statement:(fg & 2) == 0
			Conditional jump with condition: BinaryOperator
	BasicBlock:1
			Statement type:ImplicitCastExpr
			Statement:res
			Statement type:ReturnStmt
			Statement:return res;

			succ Basic Block is :0
	BasicBlock:0
	BasicBlock:4
			Statement type:BinaryOperator
			Statement:(fg & 1) == 0
			Conditional jump with condition: IfStmt
			succ Then Block is :3
			succ Else Block is :1
	BasicBlock:3
			Statement type:CallExpr
			Statement:test(filename, namelength)
			Statement type:BinaryOperator
			Statement:res = test(filename, namelength)
			Statement type:BinaryOperator
			Statement:res != 0
			Conditional jump with condition: IfStmt
			succ Then Block is :2
			succ Else Block is :1
	BasicBlock:2
			Statement type:ImplicitCastExpr
			Statement:res
			Statement type:ReturnStmt
			Statement:return res;

			succ Basic Block is :0
Function:menu_input_test
the entry block of the function is: Basic Block 10
the exit block of the function is: Basic Block 0
	BasicBlock:10
			succ Basic Block is :9
	BasicBlock:9
			Statement type:DeclStmt
			Statement:unsigned int bufferlen;

			Statement type:DeclStmt
			Statement:char filename[513] = {0};

			Statement type:DeclStmt
			Statement:unsigned int namelength;

			Statement type:DeclStmt
			Statement:int res;

			Statement type:BinaryOperator
			Statement:buffer == __null
			Conditional jump with condition: BinaryOperator
	BasicBlock:8
			Statement type:BinaryOperator
			Statement:len == __null
			Conditional jump with condition: IfStmt
			succ Then Block is :7
			succ Else Block is :6
	BasicBlock:6
			Statement type:BinaryOperator
			Statement:bufferlen = *len
			Statement type:BinaryOperator
			Statement:bufferlen > (513)
			Conditional jump with condition: BinaryOperator
	BasicBlock:5
			Statement type:BinaryOperator
			Statement:bufferlen == 0
			Conditional jump with condition: IfStmt
			succ Then Block is :4
			succ Else Block is :3
	BasicBlock:3
			Statement type:CallExpr
			Statement:strlen(filename)
			Statement type:BinaryOperator
			Statement:namelength = strlen(filename)
			Statement type:CallExpr
			Statement:input_test(filename, namelength, fg)
			Statement type:BinaryOperator
			Statement:res = input_test(filename, namelength, fg)
			Statement type:BinaryOperator
			Statement:res != 0
			Conditional jump with condition: IfStmt
			succ Then Block is :2
			succ Else Block is :1
	BasicBlock:1
			Statement type:ImplicitCastExpr
			Statement:0
			Statement type:ReturnStmt
			Statement:return 0;

			succ Basic Block is :0
	BasicBlock:0
	BasicBlock:2
			Statement type:BinaryOperator
			Statement:*len = 0
			Statement type:ImplicitCastExpr
			Statement:0
			Statement type:ReturnStmt
			Statement:return 0;

			succ Basic Block is :0
	BasicBlock:4
			Statement type:ImplicitCastExpr
			Statement:-1
			Statement type:ReturnStmt
			Statement:return -1;

			succ Basic Block is :0
	BasicBlock:7
			Statement type:ImplicitCastExpr
			Statement:-1
			Statement type:ReturnStmt
			Statement:return -1;

			succ Basic Block is :0
CalleeFunction:input_test
the entry block of the function is: Basic Block 6
the exit block of the function is: Basic Block 0
	BasicBlock:6
			succ Basic Block is :5
	BasicBlock:5
			Statement type:DeclStmt
			Statement:unsigned int type;

			Statement type:DeclStmt
			Statement:int res = 0;

			Statement type:BinaryOperator
			Statement:(fg & 2) == 0
			Conditional jump with condition: BinaryOperator
	BasicBlock:1
			Statement type:ImplicitCastExpr
			Statement:res
			Statement type:ReturnStmt
			Statement:return res;

			succ Basic Block is :0
	BasicBlock:0
	BasicBlock:4
			Statement type:BinaryOperator
			Statement:(fg & 1) == 0
			Conditional jump with condition: IfStmt
			succ Then Block is :3
			succ Else Block is :1
	BasicBlock:3
			Statement type:CallExpr
			Statement:test(filename, namelength)
			Statement type:BinaryOperator
			Statement:res = test(filename, namelength)
			Statement type:BinaryOperator
			Statement:res != 0
			Conditional jump with condition: IfStmt
			succ Then Block is :2
			succ Else Block is :1
	BasicBlock:2
			Statement type:ImplicitCastExpr
			Statement:res
			Statement type:ReturnStmt
			Statement:return res;

			succ Basic Block is :0
Function:input_test
the entry block of the function is: Basic Block 6
the exit block of the function is: Basic Block 0
	BasicBlock:6
			succ Basic Block is :5
	BasicBlock:5
			Statement type:DeclStmt
			Statement:unsigned int type;

			Statement type:DeclStmt
			Statement:int res = 0;

			Statement type:BinaryOperator
			Statement:(fg & 2) == 0
			Conditional jump with condition: BinaryOperator
	BasicBlock:1
			Statement type:ImplicitCastExpr
			Statement:res
			Statement type:ReturnStmt
			Statement:return res;

			succ Basic Block is :0
	BasicBlock:0
	BasicBlock:4
			Statement type:BinaryOperator
			Statement:(fg & 1) == 0
			Conditional jump with condition: IfStmt
			succ Then Block is :3
			succ Else Block is :1
	BasicBlock:3
			Statement type:CallExpr
			Statement:test(filename, namelength)
			Statement type:BinaryOperator
			Statement:res = test(filename, namelength)
			Statement type:BinaryOperator
			Statement:res != 0
			Conditional jump with condition: IfStmt
			succ Then Block is :2
			succ Else Block is :1
	BasicBlock:2
			Statement type:ImplicitCastExpr
			Statement:res
			Statement type:ReturnStmt
			Statement:return res;

			succ Basic Block is :0
CalleeFunction:test
the entry block of the function is: Basic Block 12
the exit block of the function is: Basic Block 0
	BasicBlock:12
			succ Basic Block is :11
	BasicBlock:11
			Statement type:DeclStmt
			Statement:unsigned int i;

			Statement type:DeclStmt
			Statement:unsigned int j;

			Statement type:DeclStmt
			Statement:char compare[12] = {'\\', '<', '>', '?', '"', '~', '/', '\\', '[', '(', ')', '!'};

			Statement type:DeclStmt
			Statement:int ret = 0;

			Statement type:BinaryOperator
			Statement:i = 0
			succ Basic Block is :10
	BasicBlock:10
			Statement type:BinaryOperator
			Statement:i < (length + 1)
			Conditional jump with condition: ForStmt
			succ Loop body Block is :9
			succ Exit Loop Block is :3
	BasicBlock:3
			Statement type:ImplicitCastExpr
			Statement:ret
			Conditional jump with condition: IfStmt
			succ Then Block is :2
			succ Else Block is :1
	BasicBlock:1
			Statement type:ImplicitCastExpr
			Statement:ret
			Statement type:ReturnStmt
			Statement:return ret;

			succ Basic Block is :0
	BasicBlock:0
	BasicBlock:2
			Statement type:CallExpr
			Statement:printf("The input is invalid\n")
			succ Basic Block is :1
	BasicBlock:9
			Statement type:BinaryOperator
			Statement:j = 0
			succ Basic Block is :8
	BasicBlock:8
			Statement type:BinaryOperator
			Statement:j < 12
			Conditional jump with condition: ForStmt
			succ Loop body Block is :7
			succ Exit Loop Block is :4
	BasicBlock:4
			Statement type:UnaryOperator
			Statement:i++
			succ Basic Block is :10
	BasicBlock:7
			Statement type:BinaryOperator
			Statement:name[i] == compare[j]
			Conditional jump with condition: IfStmt
			succ Then Block is :6
			succ Else Block is :5
	BasicBlock:5
			Statement type:UnaryOperator
			Statement:j++
			succ Basic Block is :8
	BasicBlock:6
			Statement type:BinaryOperator
			Statement:ret = -1
			succ Basic Block is :5
Function:test
the entry block of the function is: Basic Block 12
the exit block of the function is: Basic Block 0
	BasicBlock:12
			succ Basic Block is :11
	BasicBlock:11
			Statement type:DeclStmt
			Statement:unsigned int i;

			Statement type:DeclStmt
			Statement:unsigned int j;

			Statement type:DeclStmt
			Statement:char compare[12] = {'\\', '<', '>', '?', '"', '~', '/', '\\', '[', '(', ')', '!'};

			Statement type:DeclStmt
			Statement:int ret = 0;

			Statement type:BinaryOperator
			Statement:i = 0
			succ Basic Block is :10
	BasicBlock:10
			Statement type:BinaryOperator
			Statement:i < (length + 1)
			Conditional jump with condition: ForStmt
			succ Loop body Block is :9
			succ Exit Loop Block is :3
	BasicBlock:3
			Statement type:ImplicitCastExpr
			Statement:ret
			Conditional jump with condition: IfStmt
			succ Then Block is :2
			succ Else Block is :1
	BasicBlock:1
			Statement type:ImplicitCastExpr
			Statement:ret
			Statement type:ReturnStmt
			Statement:return ret;

			succ Basic Block is :0
	BasicBlock:0
	BasicBlock:2
			Statement type:CallExpr
			Statement:printf("The input is invalid\n")
			succ Basic Block is :1
	BasicBlock:9
			Statement type:BinaryOperator
			Statement:j = 0
			succ Basic Block is :8
	BasicBlock:8
			Statement type:BinaryOperator
			Statement:j < 12
			Conditional jump with condition: ForStmt
			succ Loop body Block is :7
			succ Exit Loop Block is :4
	BasicBlock:4
			Statement type:UnaryOperator
			Statement:i++
			succ Basic Block is :10
	BasicBlock:7
			Statement type:BinaryOperator
			Statement:name[i] == compare[j]
			Conditional jump with condition: IfStmt
			succ Then Block is :6
			succ Else Block is :5
	BasicBlock:5
			Statement type:UnaryOperator
			Statement:j++
			succ Basic Block is :8
	BasicBlock:6
			Statement type:BinaryOperator
			Statement:ret = -1
			succ Basic Block is :5
