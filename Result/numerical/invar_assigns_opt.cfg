[info] Using default compilation options.
Function:main
the entry block of the function is: Basic Block 16
the exit block of the function is: Basic Block 0
	BasicBlock:16
			succ Basic Block is :15
	BasicBlock:15
			Statement type:DeclStmt
			Statement:int r1;

			Statement type:DeclStmt
			Statement:int s1 = 1;

			succ Basic Block is :14
	BasicBlock:14
			Statement type:BinaryOperator
			Statement:r1 > 0
			Conditional jump with condition: WhileStmt
			succ Loop body Block is :13
			succ Exit Loop Block is :11
	BasicBlock:11
			Statement type:CStyleCastExpr
			Statement:(void)sizeof ((r1 == 0) ? 1 : 0)
			Statement type:BinaryOperator
			Statement:r1 == 0
			Conditional jump with condition: IfStmt
			succ Then Block is :10
			succ Else Block is :9
	BasicBlock:9
			Statement type:CallExpr
			Statement:__assert_fail("r1 == 0", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/numerical/invar_assigns_opt.c", 12, __extension__ __PRETTY_FUNCTION__)
			succ Basic Block is :0
	BasicBlock:0
	BasicBlock:10
			succ Basic Block is :8
	BasicBlock:8
			Statement type:StmtExpr
			Statement:({
    if (r1 == 0)
        ;
    else
        __assert_fail("r1 == 0", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/numerical/invar_assigns_opt.c", 12, __extension__ __PRETTY_FUNCTION__);
})
			Statement type:BinaryOperator
			Statement:(void)sizeof ((r1 == 0) ? 1 : 0) , __extension__ ({
    if (r1 == 0)
        ;
    else
        __assert_fail("r1 == 0", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/numerical/invar_assigns_opt.c", 12, __extension__ __PRETTY_FUNCTION__);
})
			Statement type:DeclStmt
			Statement:int r2;

			Statement type:DeclStmt
			Statement:int s2 = 1;

			succ Basic Block is :7
	BasicBlock:7
			Statement type:BinaryOperator
			Statement:r2 > 0
			Conditional jump with condition: WhileStmt
			succ Loop body Block is :6
			succ Exit Loop Block is :4
	BasicBlock:4
			Statement type:CStyleCastExpr
			Statement:(void)sizeof ((r2 == 0) ? 1 : 0)
			Statement type:BinaryOperator
			Statement:r2 == 0
			Conditional jump with condition: IfStmt
			succ Then Block is :3
			succ Else Block is :2
	BasicBlock:2
			Statement type:CallExpr
			Statement:__assert_fail("r2 == 0", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/numerical/invar_assigns_opt.c", 20, __extension__ __PRETTY_FUNCTION__)
			succ Basic Block is :0
	BasicBlock:3
			succ Basic Block is :1
	BasicBlock:1
			Statement type:StmtExpr
			Statement:({
    if (r2 == 0)
        ;
    else
        __assert_fail("r2 == 0", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/numerical/invar_assigns_opt.c", 20, __extension__ __PRETTY_FUNCTION__);
})
			Statement type:BinaryOperator
			Statement:(void)sizeof ((r2 == 0) ? 1 : 0) , __extension__ ({
    if (r2 == 0)
        ;
    else
        __assert_fail("r2 == 0", "/home/windoctober/Desktop/Clang-based-Invariant-Generator/Benchmark/numerical/invar_assigns_opt.c", 20, __extension__ __PRETTY_FUNCTION__);
})
			Statement type:IntegerLiteral
			Statement:0
			Statement type:ReturnStmt
			Statement:return 0;

			succ Basic Block is :0
	BasicBlock:6
			Statement type:BinaryOperator
			Statement:s2 = 1
			Statement type:UnaryOperator
			Statement:r2--
			succ Basic Block is :5
	BasicBlock:5
			succ Basic Block is :7
	BasicBlock:13
			Statement type:BinaryOperator
			Statement:s1 = 1
			Statement type:UnaryOperator
			Statement:r1--
			succ Basic Block is :12
	BasicBlock:12
			succ Basic Block is :14
